class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()  # Sort the array
        l = []
        i = 0
        n = len(nums)
        while (i < n - 2):
            j = i + 1
            k = n - 1
            while (j < k):
                sum1 = nums[i] + nums[j] + nums[k]
                if (sum1 > 0):
                    k = k - 1  # Decrease k if sum is big
                    while (nums[k] == nums[k + 1] and j < k):
                        k = k - 1  # Skip duplicate k
                elif (sum1 < 0):
                    j = j + 1  # Increase j if sum is small
                    while (nums[j] == nums[j - 1] and j < k):
                        j = j + 1  # Skip duplicate j
                else:
                    l.append([nums[i], nums[j], nums[k]])  # Found triplet
                    j += 1
                    while (nums[j] == nums[j - 1] and j < k):
                        j += 1  # Skip duplicate j after finding triplet
                    k -= 1
                    while (nums[k] == nums[k + 1] and j < k):
                        k -= 1  # Skip duplicate k after finding triplet
            i += 1
            while (i < n - 2 and nums[i] == nums[i - 1]):
                i += 1  # Skip duplicate i
        return l
